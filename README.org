* Flake templates
This is a collection of [[https://nixos.wiki/wiki/Flakes][Nix flake]] templates.
** List of templates in this repository
*** [[file:minimal/flake.nix][minimal]]
This is a minimal project boilerplate with [[https://github.com/numtide/flake-utils][flake-utils]].

#+begin_src sh
nix flake init -t github:akirak/flake-templates#minimal
#+end_src
*** [[file:pre-commit/flake.nix][pre-commit]]
This is a basic project boilerplate with [[https://github.com/cachix/pre-commit-hooks.nix][pre-commit-hooks.nix]] to run linters.

#+begin_src sh
nix flake init -t github:akirak/flake-templates#pre-commit
#+end_src

Alternatively, you can set up a pre-commit hook without adding a boilerplate by running =nix develop= as in [[https://github.com/akirak/git-hooks][akirak/git-hooks]].
*** [[file:node-typescript/][node-typescript]]
This is based on =minimal= but bundles opinionated settings for web development in TypeScript.
You can add it to an existing code base to start coding without global dependencies.

#+begin_src sh
nix flake init -t github:akirak/flake-templates#node-typescript
#+end_src

It includes Node, pnpm, TypeScript, and typescript-language-server as =buildInputs= of the development shell.
It also includes =.dir-locals.el= for Emacs. Eglot is preferred as the LSP client.
You can tweak these settings after initialization, e.g. to use yarn instead of pnpm.

It uses the master branch of NixPkgs to install a recent set of node packages.
*** [[file:elixir/][elixir]]
This is a simplified flake.nix for Elixir.

#+begin_src sh
nix flake init -t github:akirak/flake-templates#elixir
#+end_src

Once you enter the devShell, you can initialize a project by running =mix=:

#+begin_src sh
  mix new . --app hello
#+end_src
*** [[file:elixir-phoenix/flake.nix][elixir-phoenix]] (work in progress)
*This is a work in progress.*
At present, I have no experience with Phoenix in production.

This is a boilerplate for developing a web application using Elixir Phoenix.
You won't use Nix to build Elixir applications, but you will use Mix for your workflow.
You may be able to use [[https://github.com/serokell/mix-to-nix][serokell/mix-to-nix]] for building Elixir applications using Nix, but I haven't tried it out yet.

#+begin_src sh
nix flake init -t github:akirak/flake-templates#elixir-phoenix
#+end_src
*** [[file:meta/][meta]]
This is a set of common metadata files for GitHub projects, such as =.gitignore=, =dependabot.yml=, etc.

#+begin_src sh
nix flake init -t github:akirak/flake-templates#meta
#+end_src
** Other template repositories and alternatives
The following is a list of template repositories I found on GitHub:
- [[https://github.com/nixos/templates][NixOS]]
- [[https://github.com/serokell/templates][serokell]]
- [[https://github.com/johnae/nix-flake-templates][johnae]]

[[https://devenv.sh/][devenv]] is a convenient tool that sets up stuffs quickly.
